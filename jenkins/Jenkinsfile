pipeline {
    agent any
    tools {
        jdk 'java21' // Keep if Node.js app requires specific Java version
        maven 'maven' // Remove if not needed for Node.js
    }
    environment {
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-cred')
        IMAGE_NAME = 'sayedkhaledelhawary/node-app'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        CONTAINER_NAME = 'my-app'
    }
    triggers {
        pollSCM('* * * * *') // Poll every minute
    }
    stages {
        stage('Checkout') {
            steps {
                // Clean workspace before checkout
                cleanWs()
                // Checkout code from Git
                checkout([$class: 'GitSCM', 
                          branches: [[name: '*/main']], 
                          userRemoteConfigs: [[url: 'https://github.com/sayed-elhawary/pipline-app.git']]])
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('nodeapp') {
                    sh 'npm install'
                }
            }
        }
        stage('Test') {
            steps {
                dir('nodeapp') {
                    sh 'npm test || true' // Run Node.js tests, ignore failure if tests are optional
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                    sh "docker stop ${CONTAINER_NAME} || true"
                    sh "docker rm ${CONTAINER_NAME} || true"
                    sh "docker build -f dockerfile -t ${IMAGE_NAME}:${IMAGE_TAG} ."
            }
        }
        stage('Push to Docker Hub') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                sh "docker push ${IMAGE_NAME}:${IMAGE_TAG}"
            }
        }
        stage('Deploy') {
            steps {
                sh "docker run --name ${CONTAINER_NAME} -d -p 3000:3000 ${IMAGE_NAME}:${IMAGE_TAG}"
            }
        }
    }
    post {
        always {
            sh 'docker logout || true'
            sh 'docker image prune -f || true'
        }
    }
}
